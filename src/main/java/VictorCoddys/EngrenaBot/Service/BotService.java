package VictorCoddys.EngrenaBot.Service;

import VictorCoddys.EngrenaBot.Config.CatalogoProperties;
import VictorCoddys.EngrenaBot.Config.LojaProperties;
import VictorCoddys.EngrenaBot.Config.TelProperties;
import VictorCoddys.EngrenaBot.Config.ZApiProperties;
import VictorCoddys.EngrenaBot.Model.Agendamento;
import VictorCoddys.EngrenaBot.Model.EstadoFluxo;
import VictorCoddys.EngrenaBot.Util.JsonStorage;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

/**
 * Servi√ßo que gerencia o fluxo de mensagens do bot.
 * Armazena o estado atual de cada usu√°rio e os dados parciais do agendamento.
 */


@Service
@RequiredArgsConstructor
public class BotService {


    // Propriedades de configura√ß√£o
    private final ZApiProperties zApi;
    private final CatalogoProperties catalogo;
    private final TelProperties tel;
    private final LojaProperties lojaProps;
    private final ZApiClient zApiClient;


    // Mapa que armazena o estado atual da conversa por telefone
    private final Map<String, EstadoFluxo> estados = new HashMap<>();


    // Mapa que armazena os dados preenchidos at√© agora por telefone
    private final Map<String, Agendamento> dadosParciais = new HashMap<>();


    // Mapa que armazena os dias dispon√≠veis para agendamento por loja
    private final Map<String, List<LocalDate>> diasDisponiveisMap = new HashMap<>();


    /**
     * Processa a mensagem recebida do usu√°rio e retorna a resposta apropriada.
     *
     * @param telefone n√∫mero do telefone do usu√°rio
     * @param mensagem mensagem enviada pelo usu√°rio
     * @return resposta do bot
     */
    public String processarMensagem(String telefone, String mensagem) {
        EstadoFluxo estado = estados.getOrDefault(telefone, EstadoFluxo.INICIO);

        switch (estado) {

            // In√≠cio do atendimento: perguntar qual loja
            case INICIO -> {

                estados.put(telefone, EstadoFluxo.AGUARDANDO_LOJA);
                dadosParciais.put(telefone, new Agendamento());

                return """
                        üëã Ol√°! Seja muito bem-vindo √† *Bike Rogers*, a sua parceira n√∫mero 1 em cuidados com bicicletas! üö¥‚Äç‚ôÄÔ∏èüîß
                        
                        Vamos come√ßar o seu atendimento?
                        
                        Escolha a loja mais pr√≥xima de voc√™:
                        
                        1Ô∏è‚É£ *Loja Forte Ville*
                        2Ô∏è‚É£ *Loja Novo Horizonte*
                        
                        Responda com o n√∫mero da loja desejada. üëá
                        """;

            }


            // Recebe o n√∫mero da loja e armazena no agendamento
            case AGUARDANDO_LOJA -> {
                Agendamento agendamento = dadosParciais.get(telefone);

                switch (mensagem.trim()) {
                    case "1" -> agendamento.setLoja("Loja Forte Ville");
                    case "2" -> agendamento.setLoja("Loja Novo Horizonte");
                    default -> {
                        return "‚ùå Op√ß√£o inv√°lida. Por favor, digite:\n1 para Loja Forte Ville\n2 para Loja Novo Horizonte";
                    }
                }

                estados.put(telefone, EstadoFluxo.AGUARDANDO_NOME);
                return "Perfeito! Agora, qual o seu nome?";
            }


            // Recebe o nome do usu√°rio
            case AGUARDANDO_NOME -> {
                Agendamento agendamento = dadosParciais.get(telefone);
                agendamento.setNome(mensagem);

                estados.put(telefone, EstadoFluxo.AGUARDANDO_SERVICO);
                return """
                        üö≤ Qual servi√ßo voc√™ deseja agendar hoje?
                        
                        1Ô∏è‚É£ *Revis√£o completa* ‚Äî Deixe sua bike como nova!
                        2Ô∏è‚É£ *Troca de pe√ßas* ‚Äî Pneus, c√¢mbios, freios e mais!
                        3Ô∏è‚É£ *Compra de produtos* ‚Äî Acesse nosso cat√°logo!
                        4Ô∏è‚É£ *Outros servi√ßos* ‚Äî Personalizados para voc√™!
                        
                        Digite o n√∫mero da op√ß√£o desejada. üëá
                        """;

            }


            // Recebe o tipo de servi√ßo
            // Recebe o tipo de servi√ßo
            case AGUARDANDO_SERVICO -> {
                Agendamento agendamento = dadosParciais.get(telefone);
                String servico = mensagem.trim();
                switch (servico) {
                    case "1" -> {
                        agendamento.setTipoServico("Revis√£o");
                        estados.put(telefone, EstadoFluxo.AGUARDANDO_DATA);
                        List<LocalDate> diasDisponiveis = obterDiasDisponiveis(7);
                        diasDisponiveisMap.put(telefone, diasDisponiveis);
                        StringBuilder sb = new StringBuilder("""
                    üìÖ Perfeito! Agora escolha o dia que melhor te atende para realizarmos a revis√£o:

                    """);
                        for (int i = 0; i < diasDisponiveis.size(); i++) {
                            sb.append(i + 1).append(" - ")
                                    .append(diasDisponiveis.get(i).format(DateTimeFormatter.ofPattern("dd/MM"))).append("\n");
                        }
                        return sb.toString();
                    }

                    case "2" -> {
                        agendamento.setTipoServico("Troca de pe√ßas");
                        estados.put(telefone, EstadoFluxo.AGUARDANDO_OBSERVACAO);
                        return """
                    üîß Certo! Para continuarmos, nos diga quais pe√ßas voc√™ deseja trocar.

                    Quanto mais detalhes, melhor ser√° o nosso atendimento. üòä
                    """;
                    }

                    case "3" -> {
                        agendamento.setTipoServico("Compra");
                        agendamento.setTelefone(telefone);
                        estados.put(telefone, EstadoFluxo.AGUARDANDO_OBSERVACAO);
                        return """
                    üõçÔ∏è Legal! Informe abaixo o(s) produto(s) que voc√™ tem interesse em comprar.

                    Assim poderemos direcionar seu atendimento de forma mais eficiente!
                    """;
                    }

                    case "4" -> {
                        agendamento.setTipoServico("Outros servi√ßos");
                        estados.put(telefone, EstadoFluxo.AGUARDANDO_OBSERVACAO);
                        return """
                    ‚úçÔ∏è Por favor, descreva com detalhes o servi√ßo que deseja realizar.

                    Ap√≥s recebermos sua solicita√ß√£o, nossa equipe verificar√° a disponibilidade e daremos sequ√™ncia ao agendamento. üòä
                    """;
                    }

                    default -> {
                        return """
                    ‚ùå Op√ß√£o inv√°lida! Por favor, escolha uma das op√ß√µes abaixo:

                    1Ô∏è‚É£ - Revis√£o
                    2Ô∏è‚É£ - Troca de pe√ßas
                    3Ô∏è‚É£ - Compra
                    4Ô∏è‚É£ - Outros servi√ßos
                    """;
                    }
                }
            }


            // Recebe a observa√ß√£o do usu√°rio (caso tenha escolhido troca de pe√ßas ou outros servi√ßos)
            case AGUARDANDO_OBSERVACAO -> {
                Agendamento agendamento = dadosParciais.get(telefone);
                agendamento.setObservacao(mensagem);

                if ("Compra".equalsIgnoreCase(agendamento.getTipoServico())) {
                    // Envia para o setor de vendas com a observa√ß√£o do que o cliente quer comprar
                    enviarParaSetorDeVendas(agendamento);

                    // Envia o PDF do cat√°logo
                    zApiClient.enviarArquivoPdf(
                            telefone,
                            catalogo.getCaminhoPdf(),
                            "üõí Confira nosso cat√°logo completo de produtos!"
                    );

                    // Finaliza o atendimento
                    estados.remove(telefone);
                    dadosParciais.remove(telefone);

                    return """
                            üìÑ Enviamos o nosso cat√°logo completo para voc√™ com as melhores op√ß√µes de produtos! 
                            
                            üìù *Resumo do seu pedido:* 
                            "%s"
                            
                            üõçÔ∏è Sua solicita√ß√£o foi encaminhada ao nosso setor de vendas, que entrar√° em contato para te ajudar com todos os detalhes.
                            
                            üí¨ Caso prefira, voc√™ tamb√©m pode falar diretamente com um de nossos atendentes clicando no n√∫mero abaixo:
                            %s
                            
                            Agradecemos pelo interesse e estamos √† disposi√ß√£o para te atender com excel√™ncia! ü§ùüö≤
                            """.formatted(agendamento.getObservacao(), tel.getTelefoneVendas());

                }

                // Se n√£o for compra, segue normalmente para agendamento de data
                estados.put(telefone, EstadoFluxo.AGUARDANDO_DATA);
                List<LocalDate> diasDisponiveis = obterDiasDisponiveis(7);
                diasDisponiveisMap.put(telefone, diasDisponiveis);
                StringBuilder sb = new StringBuilder("Digite o n√∫mero do dia que melhor te atende:\n\n");
                for (int i = 0; i < diasDisponiveis.size(); i++) {
                    sb.append(i + 1).append(" - ").append(diasDisponiveis.get(i).format(DateTimeFormatter.ofPattern("dd/MM"))).append("\n");
                }
                return sb.toString();
            }


            // Recebe a data desejada e valida o formato
            case AGUARDANDO_DATA -> {
                try {
                    int opcao = Integer.parseInt(mensagem.trim()) - 1;
                    List<LocalDate> dias = diasDisponiveisMap.get(telefone);
                    if (opcao < 0 || opcao >= dias.size()) {
                        return "‚ùå Op√ß√£o inv√°lida. Escolha um n√∫mero da lista de dias dispon√≠veis.";
                    }
                    LocalDate escolhido = dias.get(opcao);
                    Agendamento agendamento = dadosParciais.get(telefone);
                    agendamento.setData(escolhido.format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
                    estados.put(telefone, EstadoFluxo.AGUARDANDO_HORARIO);
                    return "Agora informe o hor√°rio desejado. Ex: 14:00";
                } catch (NumberFormatException e) {
                    return "‚ùå Por favor, digite apenas o n√∫mero correspondente ao dia.";
                }
            }


            // Recebe o hor√°rio desejado e finaliza o agendamento
            case AGUARDANDO_HORARIO -> {
                Agendamento agendamento = dadosParciais.get(telefone);
                try {
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("H:mm");
                    LocalTime horarioEscolhido = LocalTime.parse(mensagem, formatter);

                    // Recupera o dia agendado
                    LocalDate dataEscolhida = LocalDate.parse(agendamento.getData(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                    DayOfWeek diaSemana = dataEscolhida.getDayOfWeek();

                    LocalTime inicio;
                    LocalTime fim;


                    // ‚ö†Ô∏è Aqui est√° a verifica√ß√£o do limite di√°rio
                    if (excedeuLimitePorDia(dataEscolhida, agendamento.getLoja())) {
                        estados.put(telefone, EstadoFluxo.AGUARDANDO_DATA);
                        return """
                                ‚ùå *Agenda lotada!*
                                
                                Infelizmente, todos os hor√°rios para o dia *%s* j√° foram preenchidos. üò•
                                Por favor, escolha outro dia dispon√≠vel para o seu agendamento. üìÖ
                                """.formatted(dataEscolhida.format(DateTimeFormatter.ofPattern("dd/MM")));

                    }
                    if (diaSemana == DayOfWeek.SATURDAY) {
                        inicio = LocalTime.of(8, 0);
                        fim = LocalTime.of(15, 0);
                    } else {
                        inicio = LocalTime.of(8, 0);
                        fim = LocalTime.of(18, 0);
                    }

                    // Verifica se est√° dentro do hor√°rio de funcionamento
                    if (horarioEscolhido.isBefore(inicio) || horarioEscolhido.isAfter(fim)) {
                        return String.format("‚ùå Hor√°rio fora do funcionamento da loja. Hor√°rio permitido: %s √†s %s",
                                inicio.toString(), fim.toString());
                    }

                    agendamento.setHorario(mensagem);
                    estados.put(telefone, EstadoFluxo.AGUARDANDO_CONFIRMACAO);

                    return String.format("""
                                    üìù Confirme os dados abaixo:
                                    
                                    üìç Loja: %s
                                    üë§ Nome: %s
                                    üîß Servi√ßo: %s
                                    üìã Observa√ß√£o: %s
                                    üìÜ Data: %s √†s %s
                                    
                                    Responda:
                                    
                                    ‚úÖ Confirmar
                                    ‚ùå Cancelar
                                    
                                    """,
                            agendamento.getLoja(), agendamento.getNome(), agendamento.getTipoServico(),
                            agendamento.getObservacao() != null ? agendamento.getObservacao() : "N√£o informado",
                            agendamento.getData(), agendamento.getHorario());

                } catch (Exception e) {
                    return "‚ùå Hor√°rio inv√°lido! (ex: 14:00)";
                }
            }


            // Confirma√ß√£o do agendamento
            case AGUARDANDO_CONFIRMACAO -> {
                String resposta = mensagem.trim().toLowerCase();
                Agendamento agendamento = dadosParciais.get(telefone);

                if (resposta.equals("‚úÖ") || resposta.equalsIgnoreCase("confirmar")) {
                    agendamento.setTelefone(telefone);
                    JsonStorage.salvarAgendamento(agendamento);
                    estados.remove(telefone);
                    dadosParciais.remove(telefone);
                    notificarMecanico(agendamento);
                    return "‚úÖ Agendamento confirmado com sucesso, *" + agendamento.getNome() + "*! üéâ\n\n" +
                            "üìç Loja: *" + agendamento.getLoja() + "*\n" +
                            "üìÖ Data: *" + agendamento.getData() + "* √†s *" + agendamento.getHorario() + "*\n" +
                            "üîß Servi√ßo: *" + agendamento.getTipoServico() + "*\n\n" +
                            gerarMensagemPromocional() +
                            "Nos vemos em breve! Obrigado por confiar na Bike Rogers! üö¥‚Äç‚ôÇÔ∏è‚ú®";


                } else if (resposta.equals("‚ùå") || resposta.equalsIgnoreCase("cancelar")) {
                    estados.put(telefone, EstadoFluxo.INICIO);
                    dadosParciais.remove(telefone);

                    // Limpa os dados parciais do usu√°rio
                    return "‚ùå Agendamento cancelado. Vamos come√ßar novamente.";
                } else {
                    return "Por favor, responda com ‚úÖ para confirmar ou ‚ùå para cancelar.";
                }
            }


            // Estado padr√£o para reiniciar o fluxo em caso de erro
            default -> {
                estados.put(telefone, EstadoFluxo.INICIO);
                return "Algo deu errado! Vamos come√ßar novamente. Qual loja deseja atender?";
            }
        }
    }


    /**
     * Obt√©m uma lista de dias dispon√≠veis para agendamento, considerando o limite de 5 agendamentos por dia.
     *
     * @param quantidade n√∫mero de dias a serem retornados
     * @return lista de LocalDate com os dias dispon√≠veis
     */
    private List<LocalDate> obterDiasDisponiveis(int quantidade) {
        List<LocalDate> dias = new ArrayList<>();
        LocalDate hoje = LocalDate.now();

        while (dias.size() < quantidade) {
            DayOfWeek diaSemana = hoje.getDayOfWeek();

            boolean domingo = diaSemana == DayOfWeek.SUNDAY;
            boolean sabado = diaSemana == DayOfWeek.SATURDAY;

            if (!domingo) {
                // Se for hoje, verificar hor√°rio atual (exemplo: aceitar agendamento s√≥ se agora for antes de 17:00)
                if (hoje.isEqual(LocalDate.now())) {
                    LocalTime agora = LocalTime.now();
                    LocalTime horarioFechamento = sabado ? LocalTime.of(15, 0) : LocalTime.of(18, 0);
                    if (agora.isBefore(horarioFechamento.minusHours(1))) {
                        dias.add(hoje);
                    }
                } else {
                    dias.add(hoje);
                }
            }
            hoje = hoje.plusDays(1);
        }
        return dias;
    }


    /**
     * Verifica se o limite de 5 agendamentos por dia foi excedido.
     *
     * @param data data a ser verificada
     * @return true se o limite foi excedido, false caso contr√°rio
     */
    private boolean excedeuLimitePorDia(LocalDate data, String loja) {
        List<Agendamento> ags = JsonStorage.listarAgendamentos();
        long total = ags.stream()
                .filter(a -> a.getData().equals(data.format(DateTimeFormatter.ofPattern("dd/MM/yyyy")))
                        && a.getLoja().equalsIgnoreCase(loja))
                .count();

        int limite = switch (loja) {
            case "Loja Forte Ville" -> lojaProps.getQuantidadeServicosDiarioLojaForteVille();
            case "Loja Novo Horizonte" -> lojaProps.getQuantidadeServicosDiarioLojaNovoHorizonte();
            default -> 5;
        };

        return total >= limite;
    }


    /**
     * Envia os dados do agendamento para o setor de vendas.
     * Futuramente, pode ser integrado com a Z-API para envio autom√°tico.
     *
     * @param agendamento objeto Agendamento com os dados do cliente
     */
    private void enviarParaSetorDeVendas(Agendamento agendamento) {
        String mensagem = String.format("""
                        üõçÔ∏è *Novo pedido de compra recebido!*
                        
                        üë§ Nome do cliente: %s
                        üì± Telefone: %s
                        üìù Produto(s) de interesse: %s
                        üè™ Loja: %s
                        üßæ Tipo de atendimento: %s
                        
                        üö® Por favor, entre em contato com o cliente para dar continuidade ao atendimento.
                        """,
                agendamento.getNome(),
                agendamento.getTelefone(),
                agendamento.getObservacao() != null ? agendamento.getObservacao() : "N√£o informado",
                agendamento.getLoja(),
                agendamento.getTipoServico()
        );


        zApiClient.enviarMensagemTexto(tel.getTelefoneVendas(), mensagem);
    }


    /**
     * Notifica o mec√¢nico sobre um novo agendamento.
     * Futuramente, pode ser integrado com a Z-API para envio autom√°tico.
     *
     * @param agendamento objeto Agendamento com os dados do cliente
     */
    private void notificarMecanico(Agendamento agendamento) {
        String mensagem = String.format("""
                        üîî *Novo agendamento recebido!*
                        
                        üë§ *Cliente:* %s
                        üõ†Ô∏è *Servi√ßo solicitado:* %s
                        üìÖ *Data:* %s
                        ‚è∞ *Hor√°rio:* %s
                        üìù *Observa√ß√µes:* %s
                        üè™ *Loja:* %s
                        üìû *Contato:* %s
                        
                        Por favor, prepare-se para o atendimento. Qualquer d√∫vida, entre em contato com o cliente. üö≤‚úÖ
                        """,
                agendamento.getNome(),
                agendamento.getTipoServico(),
                agendamento.getData(),
                agendamento.getHorario(),
                agendamento.getObservacao() != null ? agendamento.getObservacao() : "Nenhuma",
                agendamento.getLoja(),
                agendamento.getTelefone()
        );


        zApiClient.enviarMensagemTexto(tel.getTelefoneMecanico(), mensagem);
    }


    /**
     * Gera uma mensagem promocional aleat√≥ria para o cliente.
     * Pode ser usada em qualquer ponto do fluxo, como ap√≥s a confirma√ß√£o do agendamento.
     * <p>
     * - @return mensagem promocional
     */
    private String gerarMensagemPromocional() {
        List<String> frases = List.of(
                "üéÅ Dica: clientes que fazem 3 revis√µes ganham um brinde surpresa!",
                "üí° Lembre-se: manter a bike revisada aumenta a vida √∫til em at√© 40%!",
                "‚ö° Promo√ß√£o do m√™s: ganhe 10% OFF na pr√≥xima troca de pneus!",
                "üîß Fa√ßa sua revis√£o completa e ganhe lubrifica√ß√£o gr√°tis no mesmo dia!",
                "üö≤ A cada 5 agendamentos, voc√™ ganha uma lavagem especial gr√°tis!",
                "üéØ Dica: agendar revis√µes regulares reduz em at√© 60% os gastos com manuten√ß√£o!",
                "üå¶Ô∏è Vai pedalar na chuva? Verifique os freios! Agende uma checagem com a gente!",
                "üìÖ Clientes fi√©is recebem prioridade na agenda em per√≠odos de alta demanda!",
                "üí¨ Quer receber promo√ß√µes no WhatsApp? Avise a gente e fique por dentro!",
                "üî• Essa semana: descontos especiais para servi√ßos de freio e transmiss√£o!",
                "üéâ Indique um amigo e ganhe R$10 de cr√©dito para usar em qualquer servi√ßo!",
                "üõë Notou ru√≠do estranho na bike? Traga pra gente! Avalia√ß√£o √© por nossa conta!",
                "üö¥ Mulher que pedala tamb√©m tem vez! Ganhe um mimo especial na sua revis√£o üíú",
                "üßº Bike suja? A gente lava pra voc√™ com pre√ßo especial pra clientes da semana!",
                "üé® Deixe sua bike com cara nova: temos pintura personalizada sob consulta!",
                "üõû Pneus calibrados fazem toda a diferen√ßa! Agende uma inspe√ß√£o expressa gr√°tis!",
                "üèÅ Vai competir? Traga sua bike pra uma revis√£o t√©cnica antes da prova!",
                "üë®‚Äçüë©‚Äçüëß Pedal em fam√≠lia? Temos kits promocionais para revis√£o de 2 ou mais bikes!",
                "üìä Voc√™ sabia? Clientes que revisam a cada 2 meses t√™m 80% menos problemas!",
                "üì∏ Poste sua bike no Instagram com #BikeRogers e concorra a brindes mensais!",
                "üÜï Chegaram novos acess√≥rios! Consulte nosso cat√°logo e aproveite os pre√ßos!",
                "üõ†Ô∏è Instala√ß√£o gratuita de acess√≥rios comprados na loja (por tempo limitado!)",
                "üëÇ Escutou barulho estranho no pedal? Traga pra gente verificar sem custo!",
                "üîÅ Troque sua rela√ß√£o completa com 15% OFF esse m√™s!"
        );
        Collections.shuffle(frases);
        return frases.get(0);
    }


}
