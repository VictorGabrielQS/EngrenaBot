package VictorCoddys.EngrenaBot.Service;


import VictorCoddys.EngrenaBot.Model.Agendamento;
import VictorCoddys.EngrenaBot.Model.EstadoFluxo;
import VictorCoddys.EngrenaBot.Util.JsonStorage;
import org.springframework.stereotype.Service;


import java.util.HashMap;
import java.util.Map;

// Servi√ßo que gerencia o fluxo de mensagens do bot
// Armazena o estado atual de cada usu√°rio e os dados parciais do agendamento

@Service
public class BotService {

    // Mapas para armazenar o estado do fluxo e os dados parciais de cada usu√°rio
    private final Map<String, EstadoFluxo> estados = new HashMap<>();
    private final Map<String, Agendamento> dadosParciais = new HashMap<>();

    /**Processa a mensagem recebida do usu√°rio e retorna a resposta apropriada.
     * - @param telefone - n√∫mero de telefone do usu√°rio.
     * - @param mensagem - mensagem enviada pelo usu√°rio.
     * - @return - A resposta do bot para o usu√°rio.
     *
     */

    public String processarMensagem(String telefone, String mensagem) {

        // Verifica o estado atual do usu√°rio e processa a mensagem de acordo
        EstadoFluxo estado = estados.getOrDefault(telefone, EstadoFluxo.INICIO);

        switch (estado) {


            case INICIO -> {
                estados.put(telefone, EstadoFluxo.AGUARDANDO_NOME);
                dadosParciais.put(telefone, new Agendamento());
                return "Ol√°! Qual o seu nome?";
            }
            case AGUARDANDO_NOME -> {
                Agendamento ag = dadosParciais.get(telefone);
                ag.setNome(mensagem);
                estados.put(telefone, EstadoFluxo.AGUARDANDO_SERVICO);
                return "Qual servi√ßo voc√™ precisa? " +
                        "(1) Revis√£o" +
                        "(2) Troca de pe√ßas" +
                        "(3) Compra"+
                        "(4) Or√ßamento t√©cnico" +
                        "(5) Outros servi√ßos";
            }


            case AGUARDANDO_SERVICO -> {
                Agendamento ag = dadosParciais.get(telefone);
                ag.setTipoServico(mensagem);
                estados.put(telefone, EstadoFluxo.AGUARDANDO_DATA);
                return "Para qual dia e hor√°rio?";
            }


            case AGUARDANDO_DATA -> {
                Agendamento ag = dadosParciais.get(telefone);
                ag.setDataHora(mensagem);
                ag.setTelefone(telefone);
                JsonStorage.salvarAgendamento(ag);
                estados.remove(telefone);
                dadosParciais.remove(telefone);
                return String.format("""
                üìÖ Novo Agendamento
                üë§ Nome: %s
                üîß Servi√ßo: %s
                üïê Data: %s
                Agendamento confirmado!""",
                        ag.getNome(), ag.getTipoServico(), ag.getDataHora());
            }
            default -> {
                estados.put(telefone, EstadoFluxo.INICIO);
                return "Vamos come√ßar! Qual o seu nome?";
            }
        }
    }
}

